"use strict";(self.webpackChunkhpc_wiki=self.webpackChunkhpc_wiki||[]).push([[3640],{4492:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=n(7624),a=n(4552);const s={sidebar_position:1,sidebar_label:"MPI",hide_table_of_contents:!0,hide_title:!0,pagination_next:null,pagination_prev:null,title:"MPI",draft:!1},l=void 0,r={id:"faq/software/mpi",title:"MPI",description:"MPI (Message Passing Interface)",source:"@site/docs/faq/software/mpi.mdx",sourceDirName:"faq/software",slug:"/faq/software/mpi",permalink:"/docs/faq/software/mpi",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"MPI",hide_table_of_contents:!0,hide_title:!0,pagination_next:null,pagination_prev:null,title:"MPI",draft:!1},sidebar:"FAQ"},o={},c=[{value:"MPI (Message Passing Interface)",id:"mpi-message-passing-interface",level:2},{value:"What is MPI?",id:"what-is-mpi",level:3},{value:"What MPI implementations are available on Sharanga?",id:"what-mpi-implementations-are-available-on-sharanga",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"mpi-message-passing-interface",children:"MPI (Message Passing Interface)"}),"\n",(0,i.jsx)(t.h3,{id:"what-is-mpi",children:"What is MPI?"}),"\n",(0,i.jsx)(t.p,{children:"MPI also known as message passing interface is a set of standards that define a way to exchange data between processes. Most CPU parallel programming languages use MPI for communication."}),"\n",(0,i.jsx)(t.h3,{id:"what-mpi-implementations-are-available-on-sharanga",children:"What MPI implementations are available on Sharanga?"}),"\n",(0,i.jsx)(t.p,{children:"Currently, we support the following MPI implementations:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.open-mpi.org/",children:"OpenMPI"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.mpich.org/",children:"MPICH"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://mvapich.cse.ohio-state.edu/",children:"MVAPICH2"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Type the following command in the terminal to view the list of available MPI modules:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ spack find mpi\n"})}),"\n",(0,i.jsx)(t.p,{children:"We request the users to use these modules as they are optimised to run on Sharanga. To compile a MPI based CPU parallel job on Sharanga, use any of the following MPI commands. We have also provided an equivalent GNU Compiler command for the same."}),"\n",(0,i.jsx)("div",{className:"content-center",children:(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"MPI Compiler Collection"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"GNU Compiler Collection"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"mpicc"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"gcc"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"mpic++, mpicxx"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"g++"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"mpifort"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"gfortran"})]})]})]})}),"\n",(0,i.jsxs)(t.p,{children:["For example to compile a C++ MPI application ",(0,i.jsx)(t.code,{children:"sample.cxx"})," using MPI C++ compiler ",(0,i.jsx)(t.code,{children:"mpic++"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ mpic++ sample.cxx\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.M)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>r,M:()=>l});var i=n(1504);const a={},s=i.createContext(a);function l(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);